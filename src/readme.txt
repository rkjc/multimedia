
Richard Cross
CS-451 Spring 2013
Homework 4
06/08/2013
Block-based Motion Compensation 


--- Running the program ---

When first running the program it will ask the user to select which homework assignment to run.

After selecting [4. Homework 4] the menu will display these choices:

1. Block-Based Motion Compensation
2. Block-Based Motion Compensation - Half Pixel version
3. Removing Moving Objects


--- Selecting a Method ---

1. Task 1 - Block-Based Motion Compensation

	When selected, this method will first ask the user to input a Target file to use.
	The user is given the option to enter the full name of the file or just a 3 digit number between 001 and 200
		The full file name can include an absolute or relative path as well as the file name with extension.
	The program will automatically recognize if the user entered an appropriate number or a file name
	For file selection using the number method the program will retrieve a file named "Walk_xxx.ppm"
		(replacing the xxx with the 3 digits entered)
	
	When using the quick number selection, the file has to be in the same folder as the program was run from or in a subfolder named IDB.
	
	When it runs it will display in the console a table of motion vectors.
	It will also write this motion vector table to a file named mv.txt.
	It will also display an image of the error frame generated between the reference Image and the Targer using the motion vector information.
	
	
2. Task 1 (Extra Credit) - Block-Based Motion Compensation - Half-Pixel Version

	This method uses the same file input selection method as the Full-pixel method.
	
	This method internally generates an intermediate reference image that includes Half-pixel values spaced between all the Full-Pixel values.
	The Target image is then compared to this intermediate reference image using MSD values to find the closest matching frame.
	The Half-Pixel method increases the number of comparisons by almost 4 times.
		The p = 12 full frame comparisons produced ((p * 2) + 1)^2 = 25^2 = 625 comparisons per Target Macro-Block.
		With the Half-Frames it becomes (((p * 2) * 2) + 1)^2 = 49^2 = 2401 comparisons.
	
	
	
	When it runs it will display in the console a table of motion vectors in 0.5 increments.
	It will also write this motion vector table to a file named mv.txt in 0.5 increments.
	It will also display an image of the error frame generated between the reference Image and the Target using the motion vector information.


3. Task 2 - Removing Moving Objects


	This method only accepts the shorthand three digit number input to designate the Target Image.
	For file selected using the number will retrieve the file named "Walk_xxx.ppm"
	The reference file will automatically be selected as "Walk_yyy.ppm" where yyy = (xxx - 2).
	
	* First Method
	In the first variation of the Remove method a "Clean" image is generated by replacing the Dynamic macro-Blocks in the Target image with the closest Static block from the reference image.
	As candidate blocks to use as replacements I am checking the 8 macro blocks centered on and surrounding the Dynamic Target Block.
	I am defining "closest" as being the candidate block that is the closest match to the Target using an MSD comparison.
	Of the 8 possibilities, if there are no Static Blocks that exist then the target block replaces itself.
	This procedure works for these images where movement is confined to 2 or 3 macro-blocks, larger blocks of movement would not work with this approach.
	
	* Second Method
	This one was very straight forward as far as using Blocks from a replacement image (Walk_005.ppm) to replace any Dynamic Block from the Target Image.


Notes:

I noticed some odd behavior in the Block-Based Motion Compensation methods, but it is much more obvious in the Half-Pixel method.
For example, using frame 050 as Target and 048 as Reference produces Half-Pixel Dynamic frames along the right hand edge of the motion vector table.
Not sure if this is an artifact of the program code (meaning a mistake I may have made), or a change induced by varing light levels.
In full pixel mode there is still one Dynamic block on the right hand edge.

-----

In both of the Block-Based Motion Compensation methods the error frame shows a difference between the images on the left-hand side about 1/3 of the way up from the bottom.
It is interesting that this difference does not seem to get detected as a motion. It may get detected in a frame I have not tested yet.

-----

I used a different definition of "close" on the Remove Moving Object method one than what was apparently used for the example result given.
The example looks like it just scanned by position starting top left and used the first Static block it found.

-----

The sign of the Motion Vector is something I am unsure of.
Initially I had it as d =  (Target Position) - (Candidate Position).
Later, going through the lecture slides, I reexamined the supplemental "Lecture 10 - Calculating the Best Matching Block".
On page 7 it shows an example where the Motion Vector is calculated as d = (Candidate Position) - (Target Position).
Because of this I changed my program to produce similar output.

It is interesting to note that a search of the internet did not bring up a definitive answer to this question. There are quite a few references that mention that the motion vector represents the difference between the two images, but nothing that clearly indicates which position is to be subtracted from the other.

